<?php

/**
 * Implementation of bootstrap_theme function.
 *
 * @param array <<any params>>
 *   <<describe the params and what they do here>>
 */
function bootstrap_theme(&$existing, $type, $theme, $path) {
  // If we are auto-rebuilding the theme registry, warn about the feature.
  if (
    // Only display for site config admins.
    isset($GLOBALS['user']) && function_exists('user_access') && user_access('administer site configuration')
    && theme_get_setting('bootstrap_rebuild_registry')
    // Always display in the admin section, otherwise limit to three per hour.
    && (arg(0) == 'admin' || flood_is_allowed($GLOBALS['theme'] . '_rebuild_registry_warning', 3))
  ) {
    flood_register_event($GLOBALS['theme'] . '_rebuild_registry_warning');
    drupal_set_message(t('For easier theme development, the theme registry is being rebuilt on every page request. It is <em>extremely</em> important to <a href="!link">turn off this feature</a> on production websites.', array('!link' => url('admin/appearance/settings/' . $GLOBALS['theme']))), 'warning', FALSE);
  }
  
  return array(
    'bootstrap_links' => array(
      'variables' => array(
        'links' => array(),
        'attributes' => array(),
        'heading' => NULL
      ),
    ),
    'bootstrap_btn_dropdown' => array(
      'variables' => array(
        'links' => array(),
        'attributes' => array(),
        'type' => NULL
      ),
    ),
    'bootstrap_modal' => array(
      'variables' => array(
        'heading' => '',
        'body' => '',
        'footer' => '',
        'attributes' => array(),
        'html_heading' => FALSE,
      ),
    ),
    'bootstrap_accordion' => array(
      'variables' => array(
        'id' => '',
        'elements' => array(),
      ),
    ),
    'bootstrap_search_form_wrapper' => array(
      'render element' => 'element',
    ),
    'bootstrap_append_element' => array(
      'render element' => 'element',
    ),
  );
}

/**
 * Implementation of bootstrap_process_html_tag function.
 *
 * @param array <<any params>>
 *   <<describe the params and what they do here>>
 */
function bootstrap_process_html_tag(&$variables) {
  $tag = &$variables['element'];

  if ($tag['#tag'] == 'style' || $tag['#tag'] == 'script') {
    // Remove redundant type attribute and CDATA comments.
    unset($tag['#attributes']['type'], $tag['#value_prefix'], $tag['#value_suffix']);

    // Remove media="all" but leave others unaffected.
    if (isset($tag['#attributes']['media']) && $tag['#attributes']['media'] === 'all') {
      unset($tag['#attributes']['media']);
    }
  }
}

/**
 * Implementation of bootstrap_preprocess_page function.
 *
 * @param array <<any params>>
 *   <<describe the params and what they do here>>
 */
function bootstrap_preprocess_page(&$variables) {
  // Add information about the number of sidebars.
  if (!empty($variables['page']['sidebar_first']) && !empty($variables['page']['sidebar_second'])) {
    $variables['columns'] = 3;
  }
  elseif (!empty($variables['page']['sidebar_first'])) {
    $variables['columns'] = 2;
  }
  elseif (!empty($variables['page']['sidebar_second'])) {
    $variables['columns'] = 2;
  }
  else {
    $variables['columns'] = 1;
  }
  
  $variables['content_span'] = _bootstrap_content_span($variables['columns']);

  // Primary nav
  $variables['primary_nav'] = FALSE;
  if ($variables['main_menu']) {
    // Build links
    $variables['primary_nav'] = menu_tree(variable_get('menu_main_links_source', 'main-menu'));
    // Provide default theme wrapper function
    $variables['primary_nav']['#theme_wrappers'] = array('menu_tree__primary');
  }

  // Secondary nav
  $variables['secondary_nav'] = FALSE;
  if ($variables['secondary_menu']) {
    // Build links
    $variables['secondary_nav'] = menu_tree(variable_get('menu_secondary_links_source', 'user-menu'));
    // Provide default theme wrapper function
    $variables['secondary_nav']['#theme_wrappers'] = array('menu_tree__secondary');
  }

}

/**
 * Implementation of bootstrap_preprocess_region function.
 *
 * @param array <<any params>>
 *   <<describe the params and what they do here>>
 */
function bootstrap_preprocess_region(&$variables, $hook) {
  if ($variables['region'] == 'content') {
    $variables['theme_hook_suggestions'][] = 'region__no_wrapper';
  }
  
  if ($variables['region'] == "sidebar_first") {
    $variables['classes_array'][] = 'well';
  }
}

/**
 * Implementation of bootstrap_preprocess_block function.
 *
 * @param array <<any params>>
 *   <<describe the params and what they do here>>
 */
function bootstrap_preprocess_block(&$variables, $hook) {
  //$variables['classes_array'][] = 'row';
  // Use a bare template for the page's main content.
  dpm($variables);
  if ($variables['plugin_id'] == 'block-system-main') {
    $variables['theme_hook_suggestions'][] = 'block__no_wrapper';
  }
  $variables['title_attributes_array']['class'][] = 'block-title';
}

/**
 * Implementation of bootstrap_process_block function.
 *
 * @param array <<any params>>
 *   <<describe the params and what they do here>>
 */
function bootstrap_process_block(&$variables, $hook) {
  // Drupal 7 should use a $title variable instead of $block->subject.
  $variables['title'] = $variables['block']->subject;
}

/**
 * Implementation of _bootstrap_content_span function.
 *
 * @param array <<any params>>
 *   <<describe the params and what they do here>>
 */
function _bootstrap_content_span($columns = 1) {
  $class = FALSE;
  
  switch($columns) {
    case 1:
      $class = 'span12';
      break;
    case 2:
      $class = 'span9';
      break;
    case 3:
      $class = 'span6';
      break;
  }
  
  return $class;
}

/**
 * Implementation of bootstrap_theme_get_setting function.
 *
 * @param array <<any params>>
 *   <<describe the params and what they do here>>
 */
function bootstrap_theme_get_setting($name, $theme = NULL) {
  switch ($name) {
    case 'exclude':
      $setting = bootstrap_theme_get_info($name, $theme);
      break;
    default:
      $setting = theme_get_setting($name, $theme);
      break;
  }

  return isset($setting) ? $setting : NULL; 
}

/**
 * Implementation of bootstrap_get_settings function.
 *
 * @param array <<any params>>
 *   <<describe the params and what they do here>>
 */
function bootstrap_get_settings($theme = NULL) {
  if (!isset($theme)) {
    $theme = !empty($GLOBALS['theme_key']) ? $GLOBALS['theme_key'] : '';
  }

  if ($theme) {
    $themes = list_themes();
    $theme_object = $themes[$theme];
  }

  return $theme_object->info['settings'];
}

/**
 * Implementation of bootstrap_theme_get_info function.
 *
 * @param array <<any params>>
 *   <<describe the params and what they do here>>
 */
function bootstrap_theme_get_info($setting_name, $theme = NULL) {
  // If no key is given, use the current theme if we can determine it.
  if (!isset($theme)) {
    $theme = !empty($GLOBALS['theme_key']) ? $GLOBALS['theme_key'] : '';
  }

  $output = array();

  if ($theme) {
    $themes = list_themes();
    $theme_object = $themes[$theme];

    // Create a list which includes the current theme and all its base themes.
    if (isset($theme_object->base_themes)) {
      $theme_keys = array_keys($theme_object->base_themes);
      $theme_keys[] = $theme;
    }
    else {
      $theme_keys = array($theme);
    }

    foreach ($theme_keys as $theme_key) {
      if (!empty($themes[$theme_key]->info[$setting_name])) {
        $output[$setting_name] = $themes[$theme_key]->info[$setting_name];
      }
    }
  }
  
  return $output;
}

/**
 * Implementation of bootstrap_menu_navigation_links function.
 *
 * @param array <<any params>>
 *   <<describe the params and what they do here>>
 */
function bootstrap_menu_navigation_links($tree, $lvl = 0) {
  $result = array();

  if (count($tree) > 0) {
    foreach ($tree as $id => $item) {
      // Only work with enabled links
      if (empty($item['link']['hidden'])) {
        $new_item = array(
          'title' => $item['link']['title'],
          'link_path' => $item['link']['link_path'],
          'href' => $item['link']['href'],
        );

        // Dont do drugs and don't do any levels deeper then 1
        if ($lvl < 1) {
          $new_item['below'] = bootstrap_menu_navigation_links($item['below'], $lvl+1);
        }

        $result['menu-'. $item['link']['mlid']] = $new_item;
      }
    }
  }
  
  return $result;
}

/**
 * Implementation of bootstrap_bootstrap_progress_bar function.
 *
 * @param array <<any params>>
 *   <<describe the params and what they do here>>
 */
function bootstrap_bootstrap_progress_bar($variables) {
  $variables['attributes']['class'][] = 'progress';
  
  return "<div". new Drupal\Core\Template\Attribute($variables['attributes']) .">
  <div class=\"bar\"
       style=\"width: ". $variables['percent'] ."%;\"></div>
  </div>";
}

/**
 * Implementation of bootstrap_css_alter function.
 *
 * @param array <<any params>>
 *   <<describe the params and what they do here>>
 */
function bootstrap_css_alter(&$css) {
  $theme_path = drupal_get_path('theme', 'bootstrap');
  // Load excluded CSS files from theme.
  $excludes = _bootstrap_alter(bootstrap_theme_get_info('exclude'), 'css');
  // Add Bootstrap CDN file and overrides.
  if (theme_get_setting('cdn_bootstrap')){
    // Add CDN.
    $cdn = '//netdna.bootstrapcdn.com/twitter-bootstrap/'. theme_get_setting('cdn_bootstrap_version')  .'/css/bootstrap-combined.min.css';
    $css[$cdn] = array(
      'data' => $cdn,
      'type' => 'external',
      'every_page' => TRUE,
      'media' => 'all',
      'preprocess' => TRUE,
      'group' => CSS_AGGREGATE_THEME,
      'browsers' => array('IE' => TRUE, '!IE' => TRUE),
      'weight' => -2,
    );
    // Add overrides.
    $override = $theme_path . '/css/overrides.css';
    $css[$override] = array(
      'data' => $override,
      'type' => 'file',
      'every_page' => TRUE,
      'media' => 'all',
      'preprocess' => TRUE,
      'group' => CSS_AGGREGATE_THEME,
      'browsers' => array('IE' => TRUE, '!IE' => TRUE),
      'weight' => -1,
    );
  }
  $css = array_diff_key($css, $excludes);
}

/**
 * Implementation of bootstrap_js_alter function.
 *
 * @param array <<any params>>
 *   <<describe the params and what they do here>>
 */
function bootstrap_js_alter(&$js) {
  $files = array();

  // Load excluded JS files from theme.
  $excludes = _bootstrap_alter(bootstrap_theme_get_info('exclude'), 'js');

  // If bootstrap_ui available, we should not add js from theme info file.
  if (module_exists('bootstrap_ui')) {
    libraries_load('bootstrap', 'minified');
  }

  $theme_path = drupal_get_path('theme', 'bootstrap');

  // Replace core progress bar JS with the Bootstrap equivilent.
  if (isset($js['misc/progress.js']) && !empty($js['misc/progress.js'])) {
    unset($js['misc/progress.js']);
    $progress = $theme_path . '/js/progress.js';
    $js[$progress] = drupal_js_defaults($progress);
  }

  // Fix broken Views AJAX pagers.
  if (module_exists('views') && !empty($js[drupal_get_path('module', 'views') . '/js/ajax_view.js'])) {
    // Override core ajax prototype function to append throbber inside links,
    // instead of after it (floating issues).
    $ajax = $theme_path . '/js/bootstrap_ajax.js';
    $js[$ajax] = drupal_js_defaults($ajax);
    $js[$ajax]['group'] = JS_THEME;
    // Override views prototype function to bind to Bootstrap pagination.
    $ajax_view = $theme_path . '/js/bootstrap_ajax_view.js';
    $js[$ajax_view] = drupal_js_defaults($ajax_view);
    $js[$ajax_view]['group'] = JS_THEME;
  }

  $js = array_diff_key($js, $excludes);
  if (theme_get_setting('cdn_bootstrap')) {
    $files[] = '//netdna.bootstrapcdn.com/twitter-bootstrap/'. theme_get_setting('cdn_bootstrap_version')  .'/js/bootstrap.min.js';
  }

  // Rearrange / Add JS
  $group = -50;
  $weight = -100;
  foreach ($files as $file) {
    if (!isset($js[$file])) {
      $js[$file] = drupal_js_defaults();
      $js[$file]['data'] = $file;
      $js[$file]['group'] = $group;
      $js[$file]['weight'] = $weight;
      $weight++;
    }
  }
}

/**
 * Implementation of _bootstrap_alter function.
 *
 * @param array <<any params>>
 *   <<describe the params and what they do here>>
 */
function _bootstrap_alter($files, $type) {
  $output = array();
  
  foreach($files as $key => $value) {
    if (isset($files[$key][$type])) {
      foreach ($files[$key][$type] as $file => $name) {
        $output[$name] = FALSE;
      }
    }
  }
  return $output;
}

/**
 * Implementation of bootstrap_preprocess_table function.
 *
 * @param array <<any params>>
 *   <<describe the params and what they do here>>
 */
function bootstrap_preprocess_table(&$variables) {

  if (isset($variables['attributes']['class']) && is_string($variables['attributes']['class'])) {
    // Convert classes to an array.
    $variables['attributes']['class'] = explode(' ', $variables['attributes']['class']);
  }

  $variables['attributes']['class'][] = 'table';
  if(!in_array('table-no-striping', $variables['attributes']['class'])) {
    $variables['attributes']['class'][] = 'table-striped';
  }
  
}

/**
 * Implementation of bootstrap_form_alter function.
 *
 * @param array <<any params>>
 *   <<describe the params and what they do here>>
 */
function bootstrap_form_alter(&$form, &$form_state, $form_id) {
  // Id's of forms that should be ignored
  // Make this configurable?
  $form_ids = array(
    'node_form',
    'system_site_information_settings',
    'user_profile_form',
    'node_delete_confirm',
  );

  // Only wrap in container for certain form
  if (isset($form['#form_id']) && !in_array($form['#form_id'], $form_ids) && !isset($form['#node_edit_form']) && isset($form['actions']) && ($form['actions']['#type'] == 'actions')) {
    $form['actions']['#theme_wrappers'] = array();
  }
}

/**
 * Implementation of bootstrap_form_search_form_alter function.
 *
 * @param array <<any params>>
 *   <<describe the params and what they do here>>
 */
function bootstrap_form_search_form_alter(&$form, &$form_state) {
  $form['#attributes']['class'][] = 'form-search';
  $form['#attributes']['class'][] = 'pull-left';

  $form['basic']['keys']['#title'] = '';
  $form['basic']['keys']['#attributes']['class'][] = 'search-query';
  $form['basic']['keys']['#attributes']['class'][] = 'span2';
  $form['basic']['keys']['#attributes']['placeholder'] = t('Search');

  // Hide the default button from display and implement a theme wrapper to add
  // a submit button containing a search icon directly after the input element.
  $form['basic']['submit']['#attributes']['class'][] = 'element-invisible';
  $form['basic']['keys']['#theme_wrappers'][] = 'bootstrap_search_form_wrapper';

  // Apply a clearfix so the results don't overflow onto the form.
  $form['#suffix'] = '<div class="clearfix"></div>';
  $form['#attributes']['class'][] = 'content-search';
}

/**
 * Implementation of bootstrap_form_search_block_form_alter function.
 *
 * @param array <<any params>>
 *   <<describe the params and what they do here>>
 */
function bootstrap_form_search_block_form_alter(&$form, &$form_state) {
  $form['#attributes']['class'][] = 'form-search';

  $form['search_block_form']['#title'] = '';
  $form['search_block_form']['#attributes']['class'][] = 'search-query';
  $form['search_block_form']['#attributes']['class'][] = 'span2';
  $form['search_block_form']['#attributes']['placeholder'] = t('Search');

  // Hide the default button from display and implement a theme wrapper to add
  // a submit button containing a search icon directly after the input element.
  $form['actions']['submit']['#attributes']['class'][] = 'element-invisible';
  $form['search_block_form']['#theme_wrappers'][] = 'bootstrap_search_form_wrapper';

  // Apply a clearfix so the results don't overflow onto the form.
  $form['#attributes']['class'][] = 'content-search';
}

/**
 * Implementation of _bootstrap_element_whitelist function.
 *
 * @param array <<any params>>
 *   <<describe the params and what they do here>>
 */
function _bootstrap_element_whitelist() {
/**
 * Why whitelist an element?
 * The reason is to provide a list of elements we wish to exclude
 * from certain modifications made by the bootstrap theme which
 * break core functionality - e.g. ajax.
 */
  return array(
    'edit-refresh',
    'edit-pass-pass1',
    'edit-pass-pass2',
    'panels-ipe-cancel',
    'panels-ipe-customize-page',
    'panels-ipe-save',
  );
}

/**
 * Implementation of bootstrap_preprocess_views_view_table function.
 *
 * @param array <<any params>>
 *   <<describe the params and what they do here>>
 */
function bootstrap_preprocess_views_view_table(&$vars) {
  $vars['classes_array'][] = 'table';
}

/**
 * Implementation of bootstrap_preprocess_views_view_grid function.
 *
 * @param array <<any params>>
 *   <<describe the params and what they do here>>
 */
function bootstrap_preprocess_views_view_grid(&$vars) {
  $vars['class'] .= ' table';
}

/**
 * Prepares variables for [description of bootstrap_links] templates.
 *
 * Default template: bootstrap-links.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - bootstrap_preprocess_bootstrap_links: the markup outputted by the original bootstrap_bootstrap_links theme function.
 */
function bootstrap_preprocess_bootstrap_links(&$variables) {
  $links = $variables['links'];
  $attributes = $variables['attributes'];
  $heading = $variables['heading'];

  global $language_url;
  $output = '';

  if (count($links) > 0) {
    $output = '';
    $output .= '<ul' . new Drupal\Core\Template\Attribute($attributes) . '>';

    // Treat the heading first if it is present to prepend it to the
    // list of links.
    if (!empty($heading)) {
      if (is_string($heading)) {
        // Prepare the array that will be used when the passed heading
        // is a string.
        $heading = array(
          'text' => $heading,
          // Set the default level of the heading.
          'level' => 'li',
        );
      }
      $output .= '<' . $heading['level'];
      if (!empty($heading['class'])) {
        $output .= new Drupal\Core\Template\Attribute(array('class' => $heading['class']));
      }
      $output .= '>' . check_plain($heading['text']) . '</' . $heading['level'] . '>';
    }

    $num_links = count($links);
    $i = 1;

    foreach ($links as $key => $link) {
      $children = array();

      if (isset($link['below'])) {
        $children = $link['below'];
      }

      $attributes = array('class' => array($key));

      // Add first, last and active classes to the list of links to help out themers.
      if ($i == 1) {
        $attributes['class'][] = 'first';
      }
      if ($i == $num_links) {
        $attributes['class'][] = 'last';
      }
      if (isset($link['href']) && ($link['href'] == $_GET['q'] || ($link['href'] == '<front>' && drupal_is_front_page()))
        && (empty($link['language']) || $link['language']->language == $language_url->language)) {
        $attributes['class'][] = 'active';
      }

      if (count($children) > 0) {
        $attributes['class'][] = 'dropdown';
        $link['attributes']['data-toggle'] = 'dropdown';
        $link['attributes']['class'][] = 'dropdown-toggle';
      }

      if (!isset($link['attributes'])) {
        $link['attributes'] = array();
      }

      $link['attributes'] = array_merge($link['attributes'], $attributes);

      if (count($children) > 0) {
        $link['attributes']['class'][] = 'dropdown';
      }

      $output .= '<li' . new Drupal\Core\Template\Attribute($attributes) . '>';

      if (isset($link['href'])) {
        if (count($children) > 0) {
          $link['html'] = TRUE;
          $link['title'] .= ' <span class="caret"></span>';
          $output .=  '<a' . new Drupal\Core\Template\Attribute($link['attributes']) . ' href="#">'. $link['title'] .'</a>';
        }
        else {
          // Pass in $link as $options, they share the same keys.
          $output .= l($link['title'], $link['href'], $link);
        }
      }
      elseif (!empty($link['title'])) {
        // Some links are actually not links, but we wrap these in <span> for adding title and class attributes.
        if (empty($link['html'])) {
          $link['title'] = check_plain($link['title']);
        }

        $span_attributes = '';
        if (isset($link['attributes'])) {
          $span_attributes = new Drupal\Core\Template\Attribute($link['attributes']);
        }
        $output .= '<span' . $span_attributes . '>' . $link['title'] . '</span>';
      }

      $i++;

      if(count($children) > 0) {
        $attributes = array();
        $attributes['class'] = array('dropdown-menu');

        $output .= theme('bootstrap_links', array('links' => $children, 'attributes' => $attributes));
      }

      $output .= "</li>\n";
    }

    $output .= '</ul>';
  }

  $variables['bootstrap_preprocess_bootstrap_links'] = $output;
}
/**
 * The following could probably be moved to bootstrap-links.html.twig:
 *   3 reference(s) to $variables; NB: just use the array key in the template (without trying to access variables)
 *   approximately 79 strings of markup
 *   1 call(s) to theme() found.  The function call should be removed and changed to simple arrays:
array(
  '#theme' => 'bootstrap_links',
  '#links' => $children,
  '#attributes' => $attributes,
)
 */

/**
 * Prepares variables for [description of bootstrap_btn_dropdown] templates.
 *
 * Default template: bootstrap-btn-dropdown.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - bootstrap_preprocess_bootstrap_btn_dropdown: the markup outputted by the original bootstrap_bootstrap_btn_dropdown theme function.
 */
function bootstrap_preprocess_bootstrap_btn_dropdown(&$variables) {
  $type_class = '';
  $sub_links ='';

  $variables['attributes']['class'][] = 'btn-group';
  // Type class
  if (isset($variables['type'])) {
    $type_class = ' btn-'. $variables['type'];
  }

  // Start markup
  $output = '<div'. new Drupal\Core\Template\Attribute($variables['attributes']) .'>';

  // Ad as string if its not a link
  if (is_array($variables['label'])) {
    $output .= l($variables['label']['title'], $$variables['label']['href'], $variables['label']);
  }

  $output .= '<a class="btn'. $type_class .' dropdown-toggle" data-toggle="dropdown" href="#">';

  // Its a link so create one
  if (is_string($variables['label'])) {
    $output .= check_plain($variables['label']);
  }

  if (is_array($variables['links'])) {
    $sub_links = theme('links', array('links' => $variables['links'],'attributes' => array('class' => array('dropdown-menu'))));
  }

  // Finish markup
  $output .= '<span class="caret"></span></a>' . $sub_links . '</div>';

  $variables['bootstrap_preprocess_bootstrap_btn_dropdown'] = $output;
}
/**
 * The following could probably be moved to bootstrap-btn-dropdown.html.twig:
 *   12 reference(s) to $variables; NB: just use the array key in the template (without trying to access variables)
 *   approximately 18 strings of markup
 *   1 call(s) to theme() found.  The function call should be removed and changed to simple arrays:
array(
  '#theme' => 'links',
  '#links' => $variables['links'],
  '#attributes' => array (
  '\'class\'' => 
  array (
    0 => '\'dropdown-menu\'',
  ),
),
)
 */

/**
 * Prepares variables for [description of bootstrap_modal] templates.
 *
 * Default template: bootstrap-modal.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - bootstrap_preprocess_bootstrap_modal: the markup outputted by the original bootstrap_bootstrap_modal theme function.
 */
function bootstrap_preprocess_bootstrap_modal(&$variables) {
  $body = $variables['body'];
  $links = $variables['footer'];
  $heading = $variables['heading'];
  $attributes = $variables['attributes'];

  if (isset($variables['attributes']['class']) && is_string($variables['attributes']['class'])) { // Convert classes to an array.
    $variables['attributes']['class'] = explode(' ', $variables['attributes']['class']);
  }

  $variables['attributes']['class'][] = 'modal';

  $output = '<div'. new Drupal\Core\Template\Attribute($variables['attributes']) .'>';
  $output .= '<div class="modal-header"> <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>';
  $output .= '<h3>'. $variables['html_heading']? $variables['heading'] : check_plain($variables['heading']) .'</h3>';
  $output .= '</div>';
  $output .= '<div class="modal-body">'. render($variables['body']) .'</div>';
  $output .= '<div class="modal-footer">'. render($variables['footer']) .'</div>';
  $output .= '</div>';

  $variables['bootstrap_preprocess_bootstrap_modal'] = $output;
}
/**
 * The following could probably be moved to bootstrap-modal.html.twig:
 *   15 reference(s) to $variables; NB: just use the array key in the template (without trying to access variables)
 *   approximately 18 strings of markup
 */

/**
 * Prepares variables for [description of bootstrap_accordion] templates.
 *
 * Default template: bootstrap-accordion.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - bootstrap_preprocess_bootstrap_accordion: the markup outputted by the original bootstrap_bootstrap_accordion theme function.
 */
function bootstrap_preprocess_bootstrap_accordion(&$variables) {
  $elements = $variables['elements'];

  if (empty($variables['id'])) {
    $accordion_id = 'accordion-'. md5($elements);
  }
  else {
    $accordion_id = check_plain($variables['id']);
  }

  $output = '<div class="accordion" id="'.$accordion_id.'">';

  foreach ($elements as $id => $item) {
    $output .= '<div class="accordion-group"><div class="accordion-heading">';
    $output .= '<a class="accordion-toggle" data-toggle="collapse" data-parent="#'. $accordion_id .'" href="#'. $id .'">'. check_plain($item['header']) .'</a></div>';
    $output .= '<div id="'. $id .'" class="accordion-body collapse in"><div class="accordion-inner">';
    $output .= render($item['content']);
    $output .= '</div></div></div>';
  }

  $output .= '</div>';

  $variables['bootstrap_preprocess_bootstrap_accordion'] = $output;
}
/**
 * The following could probably be moved to bootstrap-accordion.html.twig:
 *   3 reference(s) to $variables; NB: just use the array key in the template (without trying to access variables)
 *   approximately 14 strings of markup
 */

/**
 * Prepares variables for [description of bootstrap_search_form_wrapper] templates.
 *
 * Default template: bootstrap-search-form-wrapper.html.twig.
 *
 * @param array $
 *   An associative array containing:
 *   - bootstrap_preprocess_bootstrap_search_form_wrapper: the markup outputted by the original bootstrap_bootstrap_search_form_wrapper theme function.
 */
function bootstrap_preprocess_bootstrap_search_form_wrapper(&$variables) {
  $output = '<div class="input-append">';
  $output .= $variables['element']['#children'];
  $output .= '<button type="submit" class="btn">';
  $output .= '<i class="icon-search"></i>';
  $output .= '<span class="element-invisible">' . t('Search') . '</span>';
  $output .= '</button>';
  $output .= '</div>';
  $variables['bootstrap_preprocess_bootstrap_search_form_wrapper'] = $output;
}
/**
 * The following could probably be moved to bootstrap-search-form-wrapper.html.twig:
 *   1 call(s) to t(); can also use t as a filter in Twig
 *   approximately 10 strings of markup
 */

/**
 * Prepares variables for [description of bootstrap_append_element] templates.
 *
 * Default template: bootstrap-append-element.html.twig.
 *
 * @param array $
 *   An associative array containing:
 *   - bootstrap_preprocess_bootstrap_append_element: the markup outputted by the original bootstrap_bootstrap_append_element theme function.
 */
function bootstrap_preprocess_bootstrap_append_element(&$variables) {
  $element = &$variables['element'];

  // This is also used in the installer, pre-database setup.
  $t = get_t();

  // This function is invoked as theme wrapper, but the rendered form element
  // may not necessarily have been processed by form_builder().
  $element += array(
    '#title_display' => 'before',
  );

  // Add element #id for #type 'item'.
  if (isset($element['#markup']) && !empty($element['#id'])) {
    $attributes['id'] = $element['#id'];
  }

  $exclude_control = FALSE;
  $control_wrapper = '<div class="controls">';
  // Add bootstrap class
  if ($element['#type'] == "radio" || $element['#type'] == "checkbox" || isset($element['#exclude_control'])) {
    $exclude_control = TRUE;
  }
  else {
    $attributes['class'] = array('control-group');
  }

  // Check for errors and set correct error class
  if (isset($element['#parents']) && form_get_error($element)) {
    $attributes['class'][] = 'error';
  }

  if (!empty($element['#type'])) {
    $attributes['class'][] = 'form-type-' . strtr($element['#type'], '_', '-');
  }
  if (!empty($element['#name'])) {
    $attributes['class'][] = 'form-item-' . strtr($element['#name'], array(' ' => '-', '_' => '-', '[' => '-', ']' => ''));
  }
  // Add a class for disabled elements to facilitate cross-browser styling.
  if (!empty($element['#attributes']['disabled'])) {
    $attributes['class'][] = 'form-disabled';
  }


  if (isset($element['#field_prefix'])) {
    $attributes['class'][] = 'input-prepend';
  }

  if (isset($element['#field_suffix'])) {
    $attributes['class'][] = 'input-append';
  }

  $attributes['class'][] = 'form-item';
  $output = '<div' . new Drupal\Core\Template\Attribute($attributes) . '>' . "\n";

  // If #title is not set, we don't display any label or required marker.
  if (!isset($element['#title'])) {
    $element['#title_display'] = 'none';
  }
  $prefix = isset($element['#field_prefix']) ? $element['#field_prefix'] : '';
  $suffix = isset($element['#field_suffix']) ? $element['#field_suffix'] : '';

  // Prepare input whitelist - added to ensure ajax functions don't break
  $whitelist = _bootstrap_element_whitelist();

  switch ($element['#title_display']) {
    case 'before':
    case 'invisible':
      $output .= ' ' . theme('form_element_label', $variables);
      // Check if item exists in element whitelist
      if (isset($element['#id']) && in_array($element['#id'], $whitelist)) {
        $output .= ' ' . $prefix . $element['#children'] . $suffix . "\n";
        $exclude_control = TRUE;
      }
      else {
        $output = $exclude_control ? $output : $output.$control_wrapper;
        $output .= ' ' . $prefix . $element['#children'] . $suffix . "\n";
      }
      break;

    case 'after':
      $output = $exclude_control ? $output : $output.$control_wrapper;
      $variables['#children'] = ' ' . $prefix . $element['#children'] . $suffix;
      $output .= ' ' . theme('form_element_label', $variables) . "\n";
      break;

    case 'none':
    case 'attribute':
      // Output no label and no required marker, only the children.
      $output = $exclude_control ? $output : $output.$control_wrapper;
      $output .= ' ' . $prefix . $element['#children'] . $suffix . "\n";
      break;
  }

  if ( !empty($element['#description']) ) {
    $output .= '<p class="help-block">' . $element['#description'] . "</p>\n";
  }

  // Check if control wrapper was added to ensure we close div correctly
  if ($exclude_control) {
    $output .= "</div>\n";
  }
  else {
    $output .= "</div></div>\n";
  }
  $variables['bootstrap_preprocess_bootstrap_append_element'] = $output;
}
/**
 * The following could probably be moved to bootstrap-append-element.html.twig:
 *   approximately 91 strings of markup
 *   2 call(s) to theme() found.  The function call should be removed and changed to simple arrays:
array(
  '#theme' => 'form_element_label',
  0# => ERROR: could not find T_ARRAY,
)
array(
  '#theme' => 'form_element_label',
  0# => ERROR: could not find T_ARRAY,
)
 */

/**
 * Prepares variables for [description of status_messages] templates.
 *
 * Default template: status-messages.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - bootstrap_preprocess_status_messages: the markup outputted by the original bootstrap_status_messages theme function.
 */
function bootstrap_preprocess_status_messages(&$variables) {
  $display = $variables['display'];
  $output = '';

  $status_heading = array(
    'status' => t('Status message'),
    'error' => t('Error message'),
    'warning' => t('Warning message'),
    'info' => t('Informative message'),
  );

  // Map Drupal message types to their corresponding Bootstrap classes.
  // @see http://twitter.github.com/bootstrap/components.html#alerts
  $status_class = array(
    'status' => 'success',
    'error' => 'error',
    'warning' => 'warning',
    // Not supported, but in theory a module could send any type of message.
    // @see drupal_set_message()
    // @see theme_status_messages()
    'info' => 'info',
  );

  foreach (drupal_get_messages($display) as $type => $messages) {
    $class = (isset($status_class[$type])) ? ' alert-' . $status_class[$type] : '';
    $output .= "<div class=\"alert alert-block$class\">\n";
    $output .= "  <a class=\"close\" data-dismiss=\"alert\" href=\"#\">&times;</a>\n";

    if (!empty($status_heading[$type])) {
      $output .= '<h4 class="element-invisible">' . $status_heading[$type] . "</h4>\n";
    }

    if (count($messages) > 1) {
      $output .= " <ul>\n";
      foreach ($messages as $message) {
        $output .= '  <li>' . $message . "</li>\n";
      }
      $output .= " </ul>\n";
    }
    else {
      $output .= $messages[0];
    }

    $output .= "</div>\n";
  }
  $variables['bootstrap_preprocess_status_messages'] = $output;
}
/**
 * The following could probably be moved to status-messages.html.twig:
 *   4 call(s) to t(); can also use t as a filter in Twig
 *   1 reference(s) to $variables; NB: just use the array key in the template (without trying to access variables)
 *   approximately 27 strings of markup
 */

/**
 * Prepares variables for [description of breadcrumb] templates.
 *
 * Default template: breadcrumb.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - bootstrap_preprocess_breadcrumb: the markup outputted by the original bootstrap_breadcrumb theme function.
 */
function bootstrap_preprocess_breadcrumb(&$variables) {
  $breadcrumb = $variables['breadcrumb'];

  if (!empty($breadcrumb)) {
    $breadcrumbs = '<ul class="breadcrumb">';
    
    $count = count($breadcrumb) - 1;
    foreach ($breadcrumb as $key => $value) {
      if ($count != $key) {
        $breadcrumbs .= '<li>' . $value . '<span class="divider">/</span></li>';
      }
      else{
        $breadcrumbs .= '<li>' . $value . '</li>';
      }
    }
    $breadcrumbs .= '</ul>';
    
    $variables['bootstrap_preprocess_breadcrumb'] = $breadcrumbs;
  }
}
/**
 * The following could probably be moved to breadcrumb.html.twig:
 *   1 reference(s) to $variables; NB: just use the array key in the template (without trying to access variables)
 *   approximately 6 strings of markup
 */

/**
 * Prepares variables for [description of item_list] templates.
 *
 * Default template: item-list.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - bootstrap_preprocess_item_list: the markup outputted by the original bootstrap_item_list theme function.
 */
function bootstrap_preprocess_item_list(&$variables) {
  $items = $variables['items'];
  $title = $variables['title'];
  $type = $variables['type'];
  $attributes = $variables['attributes'];
  $output = '';

  if (isset($title)) {
    $output .= '<h3>' . $title . '</h3>';
  }

  if (!empty($items)) {
    $output .= "<$type" . new Drupal\Core\Template\Attribute($attributes) . '>';
    $num_items = count($items);
    $i = 0;
    foreach ($items as $item) {
      $attributes = array();
      $children = array();
      $data = '';
      $i++;
      if (is_array($item)) {
        foreach ($item as $key => $value) {
          if ($key == 'data') {
            $data = $value;
          }
          elseif ($key == 'children') {
            $children = $value;
          }
          else {
            $attributes[$key] = $value;
          }
        }
      }
      else {
        $data = $item;
      }
      if (count($children) > 0) {
        // Render nested list.
        $data .= theme_item_list(array('items' => $children, 'title' => NULL, 'type' => $type, 'attributes' => $attributes));
      }
      if ($i == 1) {
        $attributes['class'][] = 'first';
      }
      if ($i == $num_items) {
        $attributes['class'][] = 'last';
      }
      $output .= '<li' . new Drupal\Core\Template\Attribute($attributes) . '>' . $data . "</li>\n";
    }
    $output .= "</$type>";
  }
 
  $variables['bootstrap_preprocess_item_list'] = $output;
}
/**
 * The following could probably be moved to item-list.html.twig:
 *   4 reference(s) to $variables; NB: just use the array key in the template (without trying to access variables)
 *   approximately 18 strings of markup
 */

/**
 * Prepares variables for [description of progress_bar] templates.
 *
 * Default template: progress-bar.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - bootstrap_preprocess_progress_bar: the markup outputted by the original bootstrap_progress_bar theme function.
 */
function bootstrap_preprocess_progress_bar(&$variables) {
  $output .= '<div id="progress" class="progress-wrapper">';
  $output .= '  <div class="progress progress-striped progress-info active">';
  $output .= '    <div class="bar" style="width: ' . $variables['percent'] . '%"></div>';
  $output .= '  </div>';
  $output .= '  <div class="percentage pull-right">' . $variables['percent'] . '%</div>';
  $output .= '  <div class="message">' . $variables['message'] . '</div>';
  $output .= '</div>';
  $variables['bootstrap_preprocess_progress_bar'] = $output;
}
/**
 * The following could probably be moved to progress-bar.html.twig:
 *   3 reference(s) to $variables; NB: just use the array key in the template (without trying to access variables)
 *   approximately 10 strings of markup
 */

/**
 * Prepares variables for [description of pager] templates.
 *
 * Default template: pager.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - bootstrap_preprocess_pager: the markup outputted by the original bootstrap_pager theme function.
 */
function bootstrap_preprocess_pager(&$variables) {
  $output = "";
  $tags = $variables['tags'];
  $element = $variables['element'];
  $parameters = $variables['parameters'];
  $quantity = $variables['quantity'];

  global $pager_page_array, $pager_total;

  // Calculate various markers within this pager piece:
  // Middle is used to "center" pages around the current page.
  $pager_middle = ceil($quantity / 2);
  // current is the page we are currently paged to
  $pager_current = $pager_page_array[$element] + 1;
  // first is the first page listed by this pager piece (re quantity)
  $pager_first = $pager_current - $pager_middle + 1;
  // last is the last page listed by this pager piece (re quantity)
  $pager_last = $pager_current + $quantity - $pager_middle;
  // max is the maximum page number
  $pager_max = $pager_total[$element];
  // End of marker calculations.

  // Prepare for generation loop.
  $i = $pager_first;
  if ($pager_last > $pager_max) {
    // Adjust "center" if at end of query.
    $i = $i + ($pager_max - $pager_last);
    $pager_last = $pager_max;
  }
  if ($i <= 0) {
    // Adjust "center" if at start of query.
    $pager_last = $pager_last + (1 - $i);
    $i = 1;
  }

  // End of generation loop preparation.
  $li_first = theme('pager_first', array('text' => (isset($tags[0]) ? $tags[0] : t('first')), 'element' => $element, 'parameters' => $parameters));
  $li_previous = theme('pager_previous', array('text' => (isset($tags[1]) ? $tags[1] : t('previous')), 'element' => $element, 'interval' => 1, 'parameters' => $parameters));
  $li_next = theme('pager_next', array('text' => (isset($tags[3]) ? $tags[3] : t('next')), 'element' => $element, 'interval' => 1, 'parameters' => $parameters));
  $li_last = theme('pager_last', array('text' => (isset($tags[4]) ? $tags[4] : t('last')), 'element' => $element, 'parameters' => $parameters));

  if ($pager_total[$element] > 1) {
    /*
    if ($li_first) {
      $items[] = array(
        'class' => array('pager-first'),
        'data' => $li_first,
      );
    }
    */
    if ($li_previous) {
      $items[] = array(
        'class' => array('prev'),
        'data' => $li_previous,
      );
    }

    // When there is more than one page, create the pager list.
    if ($i != $pager_max) {
      if ($i > 1) {
        $items[] = array(
          'class' => array('pager-ellipsis', 'disabled'),
          'data' => '<span>…</span>',
        );
      }
      // Now generate the actual pager piece.
      for (; $i <= $pager_last && $i <= $pager_max; $i++) {
        if ($i < $pager_current) {
          $items[] = array(
           // 'class' => array('pager-item'),
            'data' => theme('pager_previous', array('text' => $i, 'element' => $element, 'interval' => ($pager_current - $i), 'parameters' => $parameters)),
          );
        }
        if ($i == $pager_current) {
          $items[] = array(
            'class' => array('active'), // Add the active class
            'data' => l($i, '#', array('fragment' => '','external' => TRUE)),
          );
        }
        if ($i > $pager_current) {
          $items[] = array(
            //'class' => array('pager-item'),
            'data' => theme('pager_next', array('text' => $i, 'element' => $element, 'interval' => ($i - $pager_current), 'parameters' => $parameters)),
          );
        }
      }
      if ($i < $pager_max) {
        $items[] = array(
          'class' => array('pager-ellipsis', 'disabled'),
          'data' => '<span>…</span>',
        );
      }
    }
    // End generation.
    if ($li_next) {
      $items[] = array(
        'class' => array('next'),
        'data' => $li_next,
      );
    }
    /*
    if ($li_last) {
      $items[] = array(
        'class' => array('pager-last'),
        'data' => $li_last,
      );
    }
    */

    $variables['bootstrap_preprocess_pager'] = '<div class="pagination pagination-centered">'. theme('item_list', array(
      'items' => $items,
      //'attributes' => array('class' => array('pager')),
    )) . '</div>';
  }
  
  $variables['bootstrap_preprocess_pager'] = $output;
}
/**
 * The following could probably be moved to pager.html.twig:
 *   4 call(s) to t(); can also use t as a filter in Twig
 *   4 reference(s) to $variables; NB: just use the array key in the template (without trying to access variables)
 *   approximately 62 strings of markup
 *   7 call(s) to theme() found.  The function call should be removed and changed to simple arrays:
array(
  '#theme' => ERROR: could not find close parenthesis,
)
array(
  '#theme' => ERROR: could not find close parenthesis,
)
array(
  '#theme' => ERROR: could not find close parenthesis,
)
array(
  '#theme' => ERROR: could not find close parenthesis,
)
array(
  '#theme' => ERROR: could not find close parenthesis,
)
array(
  '#theme' => ERROR: could not find close parenthesis,
)
array(
  '#theme' => 'item_list',
  0# => ERROR: could not find array key,
)
 */

/**
 * Prepares variables for [description of menu_link] templates.
 *
 * Default template: menu-link.html.twig.
 *
 * @param array $
 *   An associative array containing:
 *   - bootstrap_preprocess_menu_link: the markup outputted by the original bootstrap_menu_link theme function.
 */
function bootstrap_preprocess_menu_link(&$variables) {
  $element = $variables['element'];
  $sub_menu = '';
  
  if ($element['#below']) {

    // Prevent dropdown functions from being added to management menu as to not affect navbar module.
    if (($element['#original_link']['menu_name'] == 'management') && (module_exists('navbar'))) {
      $sub_menu = drupal_render($element['#below']);
    }

    else {
      // Add our own wrapper
      unset($element['#below']['#theme_wrappers']);
      $sub_menu = '<ul class="dropdown-menu">' . drupal_render($element['#below']) . '</ul>';
      $element['#localized_options']['attributes']['class'][] = 'dropdown-toggle';
      $element['#localized_options']['attributes']['data-toggle'] = 'dropdown';

      // Check if this element is nested within another
      if ((!empty($element['#original_link']['depth'])) && ($element['#original_link']['depth'] > 1)) {
        // Generate as dropdown submenu
        $element['#attributes']['class'][] = 'dropdown-submenu';
      }
      else {
        // Generate as standard dropdown
        $element['#attributes']['class'][] = 'dropdown';
        $element['#localized_options']['html'] = TRUE;
        $element['#title'] .= ' <span class="caret"></span>';
      }

      // Set dropdown trigger element to # to prevent inadvertant page loading with submenu click
      $element['#localized_options']['attributes']['data-target'] = '#';
    }
  }
 // Issue #1896674 - On primary navigation menu, class 'active' is not set on active menu item.
 // @see http://drupal.org/node/1896674
 if (($element['#href'] == $_GET['q'] || ($element['#href'] == '<front>' && drupal_is_front_page())) && (empty($element['#localized_options']['language']) || $element['#localized_options']['language']->language == $language_url->language)) {
   $element['#attributes']['class'][] = 'active';
 }
  $output = l($element['#title'], $element['#href'], $element['#localized_options']);
  $variables['bootstrap_preprocess_menu_link'] = '<li' . new Drupal\Core\Template\Attribute($element['#attributes']) . '>' . $output . $sub_menu . "</li>\n";
}
/**
 * The following could probably be moved to menu-link.html.twig:
 *   2 call(s) to drupal_render()
 *   approximately 57 strings of markup
 */

/**
 * Prepares variables for [description of menu_tree__primary] templates.
 *
 * Default template: menu-tree--primary.html.twig.
 *
 * @param array $
 *   An associative array containing:
 *   - bootstrap_preprocess_menu_tree__primary: the markup outputted by the original bootstrap_menu_tree__primary theme function.
 */
function bootstrap_preprocess_menu_tree__primary(&$variables) {
  $variables['bootstrap_preprocess_menu_tree__primary'] = '<ul class="menu nav">' . $variables['tree'] . '</ul>';
}
/**
 * The following could probably be moved to menu-tree--primary.html.twig:
 *   approximately 3 strings of markup
 */

/**
 * Prepares variables for [description of menu_tree__secondary] templates.
 *
 * Default template: menu-tree--secondary.html.twig.
 *
 * @param array $
 *   An associative array containing:
 *   - bootstrap_preprocess_menu_tree__secondary: the markup outputted by the original bootstrap_menu_tree__secondary theme function.
 */
function bootstrap_preprocess_menu_tree__secondary(&$variables) {
  $variables['bootstrap_preprocess_menu_tree__secondary'] = '<ul class="menu nav pull-right">' . $variables['tree'] . '</ul>';
}
/**
 * The following could probably be moved to menu-tree--secondary.html.twig:
 *   approximately 3 strings of markup
 */

/**
 * Prepares variables for [description of menu_tree] templates.
 *
 * Default template: menu-tree.html.twig.
 *
 * @param array $
 *   An associative array containing:
 *   - bootstrap_preprocess_menu_tree: the markup outputted by the original bootstrap_menu_tree theme function.
 */
function bootstrap_preprocess_menu_tree(&$variables) {
  $variables['bootstrap_preprocess_menu_tree'] = '<ul class="menu nav">' . $variables['tree'] . '</ul>';
}
/**
 * The following could probably be moved to menu-tree.html.twig:
 *   approximately 3 strings of markup
 */

/**
 * Prepares variables for [description of menu_local_task] templates.
 *
 * Default template: menu-local-task.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - bootstrap_preprocess_menu_local_task: the markup outputted by the original bootstrap_menu_local_task theme function.
 */
function bootstrap_preprocess_menu_local_task(&$variables) {
  $link = $variables['element']['#link'];
  $link_text = $link['title'];
  $classes = array();

  if (!empty($variables['element']['#active'])) {
    // Add text to indicate active tab for non-visual users.
    $active = '<span class="element-invisible">' . t('(active tab)') . '</span>';

    // If the link does not contain HTML already, check_plain() it now.
    // After we set 'html'=TRUE the link will not be sanitized by l().
    if (empty($link['localized_options']['html'])) {
      $link['title'] = check_plain($link['title']);
    }
    $link['localized_options']['html'] = TRUE;
    $link_text = t('!local-task-title!active', array('!local-task-title' => $link['title'], '!active' => $active));

    $classes[] = 'active';
  }

  $variables['bootstrap_preprocess_menu_local_task'] = '<li class="' . implode(' ', $classes) . '">' . l($link_text, $link['href'], $link['localized_options']) . "</li>\n";
}
/**
 * The following could probably be moved to menu-local-task.html.twig:
 *   2 call(s) to t(); can also use t as a filter in Twig
 *   2 reference(s) to $variables; NB: just use the array key in the template (without trying to access variables)
 *   approximately 23 strings of markup
 */

/**
 * Prepares variables for [description of menu_local_action] templates.
 *
 * Default template: menu-local-action.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - bootstrap_preprocess_menu_local_action: the markup outputted by the original bootstrap_menu_local_action theme function.
 */
function bootstrap_preprocess_menu_local_action(&$variables) {
  $link = $variables['element']['#link'];

  // Build the icon rendering element.
  if (empty($link['icon'])) {
    $link['icon'] = 'plus-sign';
  }
  $icon = '<i class="' . drupal_clean_css_identifier('icon-' . $link['icon']) . '"></i>';

  // Format the action link.
  $output = '<li>';
  if (isset($link['href'])) {
    $options = isset($link['localized_options']) ? $link['localized_options'] : array();

    // If the title is not HTML, sanitize it.
    if (empty($link['localized_options']['html'])) {
      $link['title'] = check_plain($link['title']);
    }

    // Force HTML so we can add the icon rendering element.
    $options['html'] = TRUE;
    $output .= l($icon . $link['title'], $link['href'], $options);
  }
  elseif (!empty($link['localized_options']['html'])) {
    $output .= $icon . $link['title'];
  }
  else {
    $output .= $icon . check_plain($link['title']);
  }
  $output .= "</li>\n";

  $variables['bootstrap_preprocess_menu_local_action'] = $output;
}
/**
 * The following could probably be moved to menu-local-action.html.twig:
 *   1 reference(s) to $variables; NB: just use the array key in the template (without trying to access variables)
 *   approximately 24 strings of markup
 */

/**
 * Prepares variables for [description of menu_local_tasks] templates.
 *
 * Default template: menu-local-tasks.html.twig.
 *
 * @param array $
 *   An associative array containing:
 *   - bootstrap_preprocess_menu_local_tasks: the markup outputted by the original bootstrap_menu_local_tasks theme function.
 */
function bootstrap_preprocess_menu_local_tasks(&$variables) {
  $output = '';

  if (!empty($variables['primary'])) {
    $variables['primary']['#prefix'] = '<h2 class="element-invisible">' . t('Primary tabs') . '</h2>';
    $variables['primary']['#prefix'] = '<ul class="nav nav-tabs">';
    $variables['primary']['#suffix'] = '</ul>';
    $output .= drupal_render($variables['primary']);
  }

  if (!empty($variables['secondary'])) {
    $variables['primary']['#prefix'] = '<h2 class="element-invisible">' . t('Primary tabs') . '</h2>';
    $variables['secondary']['#prefix'] = '<ul class="nav nav-pills">';
    $variables['secondary']['#suffix'] = '</ul>';
    $output .= drupal_render($variables['secondary']);
  }

  $variables['bootstrap_preprocess_menu_local_tasks'] = $output;
}
/**
 * The following could probably be moved to menu-local-tasks.html.twig:
 *   2 call(s) to drupal_render()
 *   2 call(s) to t(); can also use t as a filter in Twig
 *   approximately 27 strings of markup
 */

/**
 * Prepares variables for [description of button] templates.
 *
 * Default template: button.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - bootstrap_preprocess_button: the markup outputted by the original bootstrap_button theme function.
 */
function bootstrap_preprocess_button(&$variables) {
  $element = &$variables['element'];
  $element['#attributes']['class'][] = 'btn';

  if (isset($element['#value'])) {
    $classes = array(
      //specifics
      t('Save and add') => 'btn-info',
      t('Add another item') => 'btn-info',
      t('Add effect') => 'btn-primary',
      t('Add and configure') => 'btn-primary',
      t('Update style') => 'btn-primary',
      t('Download feature') => 'btn-primary',

      //generals
      t('Save') => 'btn-primary',
      t('Apply') => 'btn-primary',
      t('Create') => 'btn-primary',
      t('Confirm') => 'btn-primary',
      t('Submit') => 'btn-primary',
      t('Export') => 'btn-primary',
      t('Import') => 'btn-primary',
      t('Restore') => 'btn-primary',
      t('Rebuild') => 'btn-primary',
      t('Search') => 'btn-primary',
      t('Add') => 'btn-info',
      t('Update') => 'btn-info',
      t('Delete') => 'btn-danger',
      t('Remove') => 'btn-danger',
    );
    foreach ($classes as $search => $class) {
      if (strpos($element['#value'], $search) !== FALSE) {
        $element['#attributes']['class'][] = $class;
        break;
      }
    }
  }

  $label = $element['#value'];
  element_set_attributes($element, array('id', 'name', 'value', 'type'));

  $element['#attributes']['class'][] = 'form-' . $element['#button_type'];
  if (!empty($element['#attributes']['disabled'])) {
    $element['#attributes']['class'][] = 'form-button-disabled';
  }

  // Prepare input whitelist - added to ensure ajax functions don't break
  $whitelist = _bootstrap_element_whitelist();

  if (isset($element['#id']) && in_array($element['#id'], $whitelist)) {
    $variables['bootstrap_preprocess_button'] = '<input' . new Drupal\Core\Template\Attribute($element['#attributes']) . ">\n"; // This line break adds inherent margin between multiple buttons
  }
  else {
    $variables['bootstrap_preprocess_button'] = '<button' . new Drupal\Core\Template\Attribute($element['#attributes']) . '>'. $label ."</button>\n"; // This line break adds inherent margin between multiple buttons
  }
}
/**
 * The following could probably be moved to button.html.twig:
 *   1 reference(s) to $variables; NB: just use the array key in the template (without trying to access variables)
 *   approximately 23 strings of markup
 */

/**
 * Prepares variables for [description of form_element] templates.
 *
 * Default template: form-element.html.twig.
 *
 * @param array $
 *   An associative array containing:
 *   - bootstrap_preprocess_form_element: the markup outputted by the original bootstrap_form_element theme function.
 */
function bootstrap_preprocess_form_element(&$variables) {
  $element = &$variables['element'];
  // This is also used in the installer, pre-database setup.
  $t = get_t();

  // This function is invoked as theme wrapper, but the rendered form element
  // may not necessarily have been processed by form_builder().
  $element += array(
    '#title_display' => 'before',
  );

  // Add element #id for #type 'item'.
  if (isset($element['#markup']) && !empty($element['#id'])) {
    $attributes['id'] = $element['#id'];
  }

  $exclude_control = FALSE;
  $control_wrapper = '<div class="controls">';
  // Add bootstrap class
  if (isset($element['#type']) && ($element['#type'] == "radio" || $element['#type'] == "checkbox")){
    $exclude_control = TRUE;
  }
  else {
    $attributes['class'] = array('control-group');
  }

  // Check for errors and set correct error class
  if (isset($element['#parents']) && form_get_error($element)) {
    $attributes['class'][] = 'error';
  }

  if (!empty($element['#type'])) {
    $attributes['class'][] = 'form-type-' . strtr($element['#type'], '_', '-');
  }
  if (!empty($element['#name'])) {
    $attributes['class'][] = 'form-item-' . strtr($element['#name'], array(' ' => '-', '_' => '-', '[' => '-', ']' => ''));
  }
  // Add a class for disabled elements to facilitate cross-browser styling.
  if (!empty($element['#attributes']['disabled'])) {
    $attributes['class'][] = 'form-disabled';
  }
  $attributes['class'][] = 'form-item';
  $output = '<div' . new Drupal\Core\Template\Attribute($attributes) . '>' . "\n";

  // If #title is not set, we don't display any label or required marker.
  if (!isset($element['#title'])) {
    $element['#title_display'] = 'none';
  }
  $prefix = isset($element['#field_prefix']) ? '<span class="field-prefix">' . $element['#field_prefix'] . '</span> ' : '';
  $suffix = isset($element['#field_suffix']) ? ' <span class="field-suffix">' . $element['#field_suffix'] . '</span>' : '';

  // Prepare input whitelist - added to ensure ajax functions don't break
  $whitelist = _bootstrap_element_whitelist();

  switch ($element['#title_display']) {
    case 'before':
    case 'invisible':
      $output .= ' ' . theme('form_element_label', $variables);
      // Check if item exists in element whitelist
      if (isset($element['#id']) && in_array($element['#id'], $whitelist)) {
        $output .= ' ' . $prefix . $element['#children'] . $suffix . "\n";
        $exclude_control = TRUE;
      }
      else {
        $output = $exclude_control ? $output : $output.$control_wrapper;
        $output .= ' ' . $prefix . $element['#children'] . $suffix . "\n";
      }
      break;

    case 'after':
      $output = $exclude_control ? $output : $output.$control_wrapper;
      $variables['#children'] = ' ' . $prefix . $element['#children'] . $suffix;
      $output .= ' ' . theme('form_element_label', $variables) . "\n";
      break;

    case 'none':
    case 'attribute':
      // Output no label and no required marker, only the children.
      $output = $exclude_control ? $output : $output.$control_wrapper;
      $output .= ' ' . $prefix . $element['#children'] . $suffix . "\n";
      break;
  }

  if ( !empty($element['#description']) ) {
    $output .= '<p class="help-block">' . $element['#description'] . "</p>\n";
  }

  // Check if control wrapper was added to ensure we close div correctly
  if ($exclude_control) {
    $output .= "</div>\n";
  }
  else {
    $output .= "</div></div>\n";
  }
  $variables['bootstrap_preprocess_form_element'] = $output;
}
/**
 * The following could probably be moved to form-element.html.twig:
 *   approximately 89 strings of markup
 *   2 call(s) to theme() found.  The function call should be removed and changed to simple arrays:
array(
  '#theme' => 'form_element_label',
  0# => ERROR: could not find T_ARRAY,
)
array(
  '#theme' => 'form_element_label',
  0# => ERROR: could not find T_ARRAY,
)
 */

/**
 * Prepares variables for [description of form_element_label] templates.
 *
 * Default template: form-element-label.html.twig.
 *
 * @param array $
 *   An associative array containing:
 *   - bootstrap_preprocess_form_element_label: the markup outputted by the original bootstrap_form_element_label theme function.
 */
function bootstrap_preprocess_form_element_label(&$variables) {
  $element = $variables['element'];
  // This is also used in the installer, pre-database setup.
  $t = get_t();

  // If title and required marker are both empty, output no label.
  if ((!isset($element['#title']) || $element['#title'] === '') && empty($element['#required'])) {
    $variables['bootstrap_preprocess_form_element_label'] = '';
  }

  // If the element is required, a required marker is appended to the label.
  $required = !empty($element['#required']) ? theme('form_required_marker', array('element' => $element)) : '';

  $title = filter_xss_admin($element['#title']);

  $attributes = array();
  // Style the label as class option to display inline with the element.
  if ($element['#title_display'] == 'after') {
    $attributes['class'][] = 'option';
    $attributes['class'][] = $element['#type'];
  }
  // Show label only to screen readers to avoid disruption in visual flows.
  elseif ($element['#title_display'] == 'invisible') {
    $attributes['class'][] = 'element-invisible';
  }

  if (!empty($element['#id'])) {
    $attributes['for'] = $element['#id'];
  }

  // @Bootstrap: Add Bootstrap control-label class except for radio.
  if ($element['#type'] != 'radio') {
    $attributes['class'][] = 'control-label';
  }
  // @Bootstrap: Insert radio and checkboxes inside label elements.
  $output = '';
  if ( isset($variables['#children']) ) {
    $output .= $variables['#children'];
  }

  // @Bootstrap: Append label
  $output .= $t('!title !required', array('!title' => $title, '!required' => $required));

  // The leading whitespace helps visually separate fields from inline labels.
  $variables['bootstrap_preprocess_form_element_label'] = ' <label' . new Drupal\Core\Template\Attribute($attributes) . '>' . $output . "</label>\n";
}
/**
 * The following could probably be moved to form-element-label.html.twig:
 *   approximately 37 strings of markup
 *   1 call(s) to theme() found.  The function call should be removed and changed to simple arrays:
array(
  '#theme' => 'form_required_marker',
  '#element' => $element,
)
 */

